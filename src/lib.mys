# pylint: disable=unused-argument

"""mys-embedded-c++-before-namespace
#include <cmath>

#define CNAN NAN
#undef NAN
"""

PI: f64 = 3.14159265358979323846

E: f64 = 2.71828182845904523536

# pylint: disable=undefined-variable
NAN: f64 = CNAN

def sin(angle: f64) -> f64:
    """Returns the trigonometric sine of given angle in radians.

    """

    return "mys-embedded-c++ std::sin(angle)"

def cos(angle: f64) -> f64:
    """Returns the trigonometric cosine of given angle in radians.

    """

    return "mys-embedded-c++ std::cos(angle)"

def is_nan(value: f64) -> bool:
    """Returns true if given value is not a number.

    """

    return "mys-embedded-c++ std::isnan(value)"

@generic(T)
def abs(value: T) -> T:
    if value < 0:
        value *= -1

    return value

@generic(T)
def div_ceil(numerator: T, denominator: T) -> T:
    return (numerator + (denominator - 1)) / denominator

@test
def test_sin():
    assert_eq(sin(0), 0)

@test
def test_cos():
    assert_eq(cos(0), 1)

@test
def test_pi():
    assert_gt(PI, 3.14)
    assert_lt(PI, 3.15)

@test
def test_e():
    assert_gt(E, 2.71)
    assert_lt(E, 2.72)

@test
def test_nan():
    assert_true(is_nan(NAN))
    assert_false(is_nan(1.0))

@test
def test_abs():
    assert_eq(abs(-1), 1)
    assert_eq(abs(1), 1)
    assert_eq(abs(-10.0), 10.0)
    assert_eq(abs(10.0), 10.0)

@test
def test_div_ceil():
    assert_eq(div_ceil(3, 3), 1)
    assert_eq(div_ceil(4, 3), 2)
    assert_eq(div_ceil(5, 3), 2)
    assert_eq(div_ceil(6, 3), 2)
    assert_eq(div_ceil(7, 3), 3)

    assert_eq(div_ceil(5, 1), 5)
